<?php

/**
 * @file
 * Adds a formatter for text fields that creates a licence badge, link and
 * metadata.
 */

  // Note that since we are using select fields here and not taxonomies, that we can't remove select options if any nodes are already using them.  Presumably there will be such changes from time to time., eg, version updates to the Creative Commons license.
  // If we want to keep existing nodes' deprecated select values, then we should use a method like in the first answer here: http://drupal.stackexchange.com/questions/112315/how-can-i-remove-items-from-the-allowed-values-list-of-a-select-field-that-has-d
// Or, if we want to upgrade existing nodes' values to their new-value equivalent, we would first run a drush script to update the values, and then we would change the select options normally.

/**
 * Implements hook_field_formatter_info().
 */
function license_field_formatter_info() {
  return array(
    'license_formatter' => array(
      'label' => t('License'),
      'field types' => array('list_text'),
    ),
    'license_formatter_export' => array(
      'label' => t('License Export'),
      'field types' => array('list_text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function license_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'license_formatter':
      $license_names = list_allowed_values($field);
      foreach ($items as $delta => $item) {
        if(!empty($item['value'])){
          $data = array();
          $data = parse_url($item['value']);
          $data['uri'] = $item['value'];
          $data['name'] = $license_names[$item['value']];
          $license = module_invoke_all('license_load', $data);
          drupal_alter('license_load', $license, $data);
          $element = module_invoke_all('license_display', $license, $entity);
          drupal_alter('license_display', $element);
          $elements[$delta] = $element;
        }
      }
      break;

    case 'license_formatter_export':
      $license_names = list_allowed_values($field);
      foreach ($items as $delta => $item) {
        $data = array();
        $data = parse_url($item['value']);
        $data['uri'] = $item['value'];
        $data['name'] = $item['value'];
        $license = module_invoke_all('license_load', $data);
        drupal_alter('license_load', $license, $data);
        $element = module_invoke_all('license_display_export', $license, $entity);
        drupal_alter('license_display', $element);
        $elements[$delta] = $element;
      }
      break;
  }

  return $elements;
}

/**
 * Helper function for display of typical license badge and link.
 * 
 * @param $uri
 *   Canonical URI of license.
 * @param $name
 *   Human readable license name.
 * @param $image
 *   License image URI.
 * @param $alt
 *   License image alt text.
  * @param $uri_attributes
 *   Optional attributes for the URI.
 * @return array
 */
function license_basic_display($uri, $name, $image, $alt = '', $hover_text = '') {
  $image = array(
    'path' => $image,
    'alt' => $alt,
  );
  $attributes = array(
    'attributes' => array(
      'rel' => 'license',
    ),
  );

  // The content is the image followed by the name
  $content = theme('image', $image) . '<p>' . $name . '</p>';

  // Add a popup if there is hover text
  if ($hover_text) {
    require_once drupal_get_path('module', 'popup') . '/includes/popup.api.inc';
    $popup_attributes = array( // See the popup module's readme for more options
      'width' => 420,
      #'effect' => 'slide-down', // not sure if I like this
      'empty-body' => 'none',
      'link' => $uri,
    );
    $content = popup_element($content, $hover_text, $popup_attributes);
  }

  return array(
    'content' => array(
      '#type' => 'link',
      '#title' => $content,
      '#href' => $uri,
      '#options' => array('html' => TRUE) + $attributes,
      '#suffix' => '<br />',
    ),
  );
}

function mukurtu_build_tk_label_text($entity, $uri) {

  // Scrape the license description
  // I was unable to do this by converting the HTML to a DOM object, so just strstr'ing for what we need
  $desc = file_get_contents($uri);
  $desc = strstr ($desc, 'et_pb_text');
  $desc = strstr ($desc, '<p>');
  $desc = strstr ($desc, '</div>', TRUE);
  $desc = trim ($desc);

  return $desc;

  global $language_content;
  $communities = array();
  if(!empty($entity->group_audience[$language_content->language])) {
    foreach ($entity->group_audience[$language_content->language] as $field) {
      $group = og_load_entity_from_group($field['gid']);
      if(!empty($group)){
        if ($group->type == 'community') {
          $communities[] = $group->title;
        }
      }
    }
  }
  else if(!empty($entity->field_communities[$language_content->language])) {
    foreach ($entity->field_communities[$language_content->language] as $field) {
      $group = node_load($field['nid']);
      if(!empty($group)){
        if ($group->type == 'community') {
          $communities[] = $group->title;
        }
      }
    }  
  }

  return $communities;
}

<?php
/**
 * @file
 * Code for the Mukurtu Dictionary feature.
 */

include_once 'ma_dictionary.features.inc';

function ma_dictionary_menu() {

    // Form to set default language
    $items['dashboard/set-default-language'] = array(
      'title' => 'Set Default Language',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ma_dictionary_set_default_language'),
      'access arguments' => array('administer taxonomy'),
    );
    return $items;
}

function ma_dictionary_set_default_language() {
    $language = taxonomy_vocabulary_machine_name_load('language');
    $terms = taxonomy_get_tree($language->vid);

    foreach ($terms as $term) {
        $options[$term->tid] = $term->name;
    }

    $form['default_language'] = array (
      '#type' => 'radios',
      '#title' => 'Select the default language used when creating dictionary words',
      '#default_value' => variable_get ('mukurtu_default_language'),
      '#options' => $options,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );

    return $form;
}

function ma_dictionary_set_default_language_submit ($form, &$form_state) {
    if ($tid = $form_state['values']['default_language']) {
        variable_set ('mukurtu_default_language', $tid);
        $term = taxonomy_term_load($tid);
        drupal_set_message('Default language set to <i>' . $term->name . '</i>.');
    }
    drupal_goto ('dashboard');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_dictionary_form_views_exposed_form_alter(&$form, &$form_state) {
    // Add a button to reset search and filters
    // Search API provides a button on the view that will reset the search, but not the filters. Leaving that off and creating our own that will reset both.
    if (strpos($form['#id'], 'views-exposed-form-dictionary-words-all') !== FALSE) {
        if (count(arg()) > 1 OR count(drupal_get_query_parameters())) {
            $form['reset'] = array('#markup' => l(t('Reset'),'dictionary', array('attributes' => array('class' => array ('btn', 'btn-primary', 'form-submit')), 'html' => TRUE)));
        }
    }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_dictionary_form_dictionary_word_node_form_alter(&$form, &$form_state) {
  // "Item Sharing Settings" field customizations versus how it works by default (as used in the DH node form) //

  // Not required for Dictionary Words
  $form['field_item_privacy_setting'][LANGUAGE_NONE]['#required'] = FALSE;

  // The field has a default value. This is just to catch cases on demo sites where words were set already before this field was added
  if (!$form['field_item_privacy_setting'][LANGUAGE_NONE]['#default_value']) {
    $form['field_item_privacy_setting'][LANGUAGE_NONE]['#default_value'] = 'all';
  }

  // Hide the field unless a Community is selected in the first value
  $form['field_item_privacy_setting']['#states'] = array(
    'invisible' => array(
      ':input[id="edit-oggroup-fieldset-0-dropdown-first"]' => array('value' => 0),
    ),
  );


  // Actions to perform when adding (not editing) dictionary words
  if ($form['#action'] == '/node/add/dictionary-word') {
      // Remove any languages the user isn't a member of
      $user_language_communities = _ma_dictionary_get_user_language_communities();
      foreach($form['field_dictionary_word_language'][LANGUAGE_NONE]['#options'] as $lang_id => $lang) {
          if(!isset($user_language_communities[$lang_id])) {
              unset($form['field_dictionary_word_language'][LANGUAGE_NONE]['#options'][$lang_id]);
          }
      }

    // Set the default language, if one is defined, or the first language if no default is defined
    $default_language = variable_get ('mukurtu_default_language');
    if (!$default_language) {
      $language = taxonomy_vocabulary_machine_name_load('language');
      $terms = taxonomy_get_tree($language->vid);
      if (count($terms)) {
        $default_language = $terms[0]->tid;
      }
    }
    $form['field_dictionary_word_language'][LANGUAGE_NONE]['#default_value'] = $default_language;

    // Set default language community to anything valid. It'll be changed to the correct value on save
    $first_language_tid = array_keys($form['field_dictionary_word_language']['und']['#options'])[0];
    $first_language_community = _ma_dictionary_get_language_community_from_tid($first_language_tid);
    if($first_language_community) {
        $form['field_language_community'][LANGUAGE_NONE][0]['default']['#default_value'] = $first_language_community;
    }
  }

  // Change paragraphs button text to be dictionary specific
  $form['field_word_entry'][LANGUAGE_NONE]['add_more']['add_more']['#value'] = t('Add new word entry');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_dictionary_form_language_community_node_form_alter(&$form, &$form_state) {
    // Remove any languages that already have language communities
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'language_community')
        ->addMetaData('account', user_load(1)); // Run the query as user 1.

    $result = $query->execute();

    // Building list of language tids for existing communities
    $existing_language_tids = array();
    if(isset($result['node'])) {
        foreach($result['node'] as $result_node) {
            $existing_language_community = node_load($result_node->nid);
            if($existing_language_community && !empty($existing_language_community->field_community_language[LANGUAGE_NONE])) {
                // Language communities only have one language association
                $existing_language_tids[] = $existing_language_community->field_community_language[LANGUAGE_NONE][0]['tid'];
            }
        }
    }

    // If this is a pre-existing language community, don't remove its own language tid from the list
    if(!empty($form['#node']->field_community_language)) {
        $existing_key = array_search($form['#node']->field_community_language[LANGUAGE_NONE][0]['tid'], $existing_language_tids);
        if($existing_key >= 0) {
            unset($existing_language_tids[$existing_key]);
        }
    }

    // Remove those tids from the form options
    foreach($existing_language_tids as $language_tid) {
        if(isset($form['field_community_language'][LANGUAGE_NONE]['#options'][$language_tid])) {
            unset($form['field_community_language'][LANGUAGE_NONE]['#options'][$language_tid]);
        }
    }

    // If a tid is passed as an argument, try and pre-populate fields
    $args = arg();
    $passed_tid = $args[count($args) - 1];
    if(is_numeric($passed_tid) && $passed_tid > 0) {
        $passed_term = taxonomy_term_load($passed_tid);
        if(!empty($passed_term) && $passed_term->vocabulary_machine_name == 'language') {
            if(isset($form['field_community_language'][LANGUAGE_NONE]['#options'][$passed_term->tid])) {
                $form['field_community_language'][LANGUAGE_NONE]['#default_value'] = $passed_term->tid;
                $form['title']['#default_value'] = $passed_term->name . ' '. t('Language Community');
            }
        }
    }

    // Hide the group element
    $form['og_group_ref']['#access'] = FALSE;
}

/**
 * Implements hook_field_widget_form_alter.
 */
function ma_dictionary_field_widget_form_alter(&$element, &$form_state, $context) {
    if(isset($element['#field_name']) && $element['#field_name'] == 'field_word_entry') {
        $n_entries = 0;
        if(is_numeric($element['#max_delta']) && $element['#max_delta'] > -1) {
            $n_entries = $element['#max_delta'];
            foreach(range(0, $n_entries) as $i) {
                // Change the field group title for each word entry, customized based on source/translation
                $word_number = $i + 1;
                $new_word_title = "#$word_number ";
                $source = "";
                $translation = "";

                if(!empty($element[$i]['field_source'][LANGUAGE_NONE][0]['value']['#default_value'])) {
                    $source = $element[$i]['field_source'][LANGUAGE_NONE][0]['value']['#default_value'] . ' ';
                }

                if(!empty($element[$i]['field_translation'][LANGUAGE_NONE][0]['value']['#default_value'])) {
                    $translation .= $element[$i]['field_translation'][LANGUAGE_NONE][0]['value']['#default_value'] . ' ';
                }

                if(!empty($source)) {
                    if(!empty($translation)) {
                        $new_word_title .= $source . ' - ' . $translation;
                    } else {
                        $new_word_title .= $source;
                    }
                } else {
                    $new_word_title .= $translation;
                }

                // This is pretty gross. All elements fieldgroup points to the same object by reference.
                // Here we make a copy and change just the title, so we can have different titles for the same
                // field group
                $group_clone = (object) (array) $element[$i]['#groups']['group_word_bundle'];
                $group_clone->label = $new_word_title;
                $element[$i]['#fieldgroups']['group_word_bundle'] = $group_clone;


                // Remove paragraph bundle type text
                unset($element[$i]['paragraph_bundle_title']['info']['#markup']);

                // Change add sample sentence text
                $element[$i]['field_sample_sentence'][LANGUAGE_NONE]['add_more']['#value'] = t('Add another sample sentence');

                // Change add another recording text
                $element[$i]['field_dictionary_word_recording'][LANGUAGE_NONE]['add_more']['#value'] = t('Add another recording');
            }
        }
    }
}


/**
 * Implements template_preprocess_views_view.
 */
function ma_dictionary_preprocess_views_view(&$vars) {
  $view = &$vars['view'];

  // Add JS for browse mode switcher on Dictionary view
  if ($view->name == 'dictionary_words') {
    drupal_add_library('system', 'jquery.cookie');
    drupal_add_js(drupal_get_path('module', 'ma_dictionary') . '/js/dictionary_browse_mode_switcher.js');
  }

}

/**
 * Implements hook_url_outbound_alter
 */
// For the title (first letter) facet, restrict to one letter (or digit, or non-letter) at a time.
// Interestingly, this cannot be done in the facet config, by whatever combo of Operator and "Limit to one active item"

function ma_dictionary_url_outbound_alter(&$path, &$options, $original_path) {
  if (substr($path, 0, 11) == 'dictionary/') {
    if (substr_count($path, 'title') > 1) { // this catches first letter links adding to an existing first-letter-filtered URL
      $start_of_first_title = strpos ($path, '/title/');
      $end_of_first_title = strpos ($path, '/', $start_of_first_title + 8);
      $path = substr($path, 0, $start_of_first_title) . substr($path, $end_of_first_title); // strip out the first (ie. existing) title filter on the outbound link
    }
  }
}

/**
 *
 */
function ma_dictionary_node_view($node, $view_mode = 'full', $langcode = NULL) {
    if($node->type == 'dictionary_word' && $view_mode == 'full') {
        // Replace the link to the language taxonomy with a link to the dictionary browse page, with language pre-selected.
        // Language is required and only one is allowed, so hardcoding is fine here.
        $language_alias = drupal_get_path_alias('taxonomy/term/' . $node->field_dictionary_word_language['und'][0]['tid']);
        $language = substr($language_alias, strripos($language_alias, '/') + 1);
        $node->content['field_dictionary_word_language'][0]['#href'] = '/dictionary/language/' . $language;
    }

    // Only render the first word entry per term in the search results
    if($node->type == 'dictionary_word' && $view_mode == 'search_result') {
        if(count($node->field_word_entry) > 0) {
            $first = TRUE;
            foreach($node->content['field_word_entry']['#items'] as $key => $item) {
                if(!$first) {
                    unset($node->content['field_word_entry'][$key]);
                }
                $first = FALSE;
            }
        }
    }
}

function ma_dictionary_entity_view($entity, $type, $view_mode, $langcode) {
    if($type == 'paragraphs_item' && $entity->bundle == 'dictionary_word_bundle') {
        // If no alternate spelling is given, put the standard term in
        if(empty($entity->field_alternate_spelling)) {
            // Lookup the parent dictionary word node
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'dictionary_word')
                ->propertyCondition('status', 1) // published? yes
                ->fieldCondition('field_word_entry', 'revision_id', $entity->revision_id)
                ->range(0, 10);
            $result = $query->execute();

            // If there is more than one result, the paragraph was re-used somewhere, so don't load the title
            if (isset($result['node']) && count($result['node']) == 1) {
                $nid = key($result['node']);

                $word_node = node_load($nid);
                if($word_node) {
                    $entity->field_alternate_spelling[LANGUAGE_NONE][]['value'] = $word_node->title;
                    $rendered_field = field_view_field($type, $entity, 'field_alternate_spelling', $view_mode);
                    $entity->content['field_alternate_spelling'] = $rendered_field;
                }
            }
        }

        if($view_mode == 'word_entry_in_word_list') {
            // Replace the field group header label with specific word entry info
            $term_name = $entity->field_alternate_spelling[LANGUAGE_NONE][0]['value'];
            $term_translation = (!empty($entity->field_translation)) ? " - " . $entity->field_translation[LANGUAGE_NONE][0]['value'] : "";
            $term_source = (!empty($entity->field_source)) ? " (" . $entity->field_source[LANGUAGE_NONE][0]['value'] . ")" : "";
            $label = $term_name . $term_translation . $term_source;
            $group_clone = (object) (array) $entity->content['#groups']['group_teaser'];
            $group_clone->label = $label;
            $entity->content['#fieldgroups']['group_teaser'] = $group_clone;
        }

        // Wrap sample sentences in a div
        if(isset($entity->content['field_sample_sentence'])) {
            foreach($entity->content['field_sample_sentence']['#items'] as $key => $value) {
                $entity->content['field_sample_sentence'][$key]['#markup'] = '<div class="sample-sentence">' . $entity->content['field_sample_sentence'][$key]['#markup'] . '</div>';
            }
        }

        // Only render one recording in teaser
        if($view_mode == 'dictionary_teaser') {
            unset($entity->content['field_dictionary_word_recording'][1]);
            if(count($entity->field_dictionary_word_recording) > 1) {
                $first = TRUE;
                foreach($entity->content['field_dictionary_word_recording']['#items'] as $key => $item) {
                    if(!$first) {
                        unset($entity->content['field_dictionary_word_recording'][$key]);
                    }
                    $first = FALSE;
                }
            }
        }
    }
}

/**
 * Implements hook_node_access
 */
function ma_dictionary_node_access($node, $op, $account) {
    /*    $type = is_string($node) ? $node : $node->type;
    if($type == 'dictionary_word') {
        $user_language_communities = _ma_dictionary_get_user_language_communities($account);

        if($op == 'update') {
            dpm($node);
        }
    }
    */
    return NODE_ACCESS_IGNORE;
}

function ma_dictionary_node_prepare($node) {
    if($node->type == 'dictionary_word') {
        if(empty($node->field_word_entry)) {
            // Start with an empty word entry form for any new dictionary word
            // It's the only bundle type, we don't want the user to have to click a button needlessly
            $paragraph = new ParagraphsItemEntity(array('field_name' => 'field_word_entry', 'bundle' => 'dictionary_word_bundle'));
            $paragraph->is_new = TRUE;
            $paragraph->setHostEntity('node', $node);
            $paragraph->field_source = array();
            $paragraph->field_translation = array();
            $paragraph->field_pronunciation = array();
            $paragraph->field_dictionary_word_recording = array();
            $paragraph->field_definition = array();
            $paragraph->field_part_of_speech = array();
        }
    }
}

/**
 * Implements hook_node_presave.
 */
function ma_dictionary_node_presave($node) {
    if($node->type == 'dictionary_word') {
        // We always want the dictionary word's language community to be set to the language community that has the corresponding
        // related language taxonomy term. Language community is a hidden field.
        $lang_nid = _ma_dictionary_get_language_community_from_tid($node->field_dictionary_word_language[LANGUAGE_NONE][0]['tid']);
        if($lang_nid) {
            $node->field_language_community['und'][0]['target_id'] = $lang_nid;
        }
    }
}

/**
 * Implements hook_node_update.
 */
function ma_dictionary_node_update($node) {
    if($node->type == 'dictionary_word') {
        // If the word had any changes in word lists, sync those up here
        $current_word_lists = _ma_dictionary_flatten_reference_field($node->field_word_list);
        $old_word_lists = _ma_dictionary_flatten_reference_field($node->original->field_word_list);
        $no_change = array_intersect($current_word_lists, $old_word_lists);

        $added = array_diff($current_word_lists, $no_change);
        $removed = array_diff($old_word_lists, $no_change);

        // These are the word lists the word is being added to. Load each word list and create the opposite relationship
        foreach($added as $added_word_list_nid) {
            entity_get_controller('node')->resetCache(array($added_word_list_nid));
            $word_list = node_load($added_word_list_nid);
            $already_exists = FALSE;
            if($word_list) {
                // Check all existing words, don't add the node reference if it already exists
                foreach($word_list->field_words[LANGUAGE_NONE] as $word_list_word) {
                    if($word_list_word['target_id'] == $node->nid) {
                        $already_exists = TRUE;
                    }
                }

                // Add the reference
                if(!$already_exists) {
                    $word_list->field_words[LANGUAGE_NONE][] = array('target_id' => $node->nid);
                    node_save($word_list);
                }
            }
        }

        // These are the word lists the word is being removed from. Load each and remove the reference
        foreach($removed as $removed_word_list_nid) {
            entity_get_controller('node')->resetCache(array($removed_word_list_nid));
            $word_list = node_load($removed_word_list_nid);

            if($word_list) {
                foreach($word_list->field_words[LANGUAGE_NONE] as $key => $word_list_word) {
                    if($word_list_word['target_id'] == $node->nid) {
                        unset($word_list->field_words[LANGUAGE_NONE][$key]);
                        node_save($word_list);
                    }
                }
            }
        }
    }

    if($node->type == 'word_list') {
        $current_words = _ma_dictionary_flatten_reference_field($node->field_words);
        $old_words = _ma_dictionary_flatten_reference_field($node->original->field_words);
        $no_change = array_intersect($current_words, $old_words);

        $added = array_diff($current_words, $no_change);
        $removed = array_diff($old_words, $no_change);

        // Add words to the word list
        foreach($added as $added_word_nid) {
            entity_get_controller('node')->resetCache(array($added_word_nid));
            $word = node_load($added_word_nid);
            $already_exists = FALSE;
            if($word) {
                // Check all existing word lists, don't add the node reference if it already exists
                if(!empty($word->field_word_list)) {
                    foreach($word->field_word_list[LANGUAGE_NONE] as $word_list) {
                        if($word_list['target_id'] == $node->nid) {
                            $already_exists = TRUE;
                        }
                    }
                }

                // Add the reference
                if(!$already_exists) {
                    $word->field_word_list[LANGUAGE_NONE][] = array('target_id' => $node->nid);
                    node_save($word);
                }
            }
        }

        // Remove words
        foreach($removed as $removed_word_nid) {
            entity_get_controller('node')->resetCache(array($removed_word_nid));
            $word = node_load($removed_word_nid);
            if($word) {
                foreach($word->field_word_list[LANGUAGE_NONE] as $key => $word_list) {
                    if($word_list['target_id'] == $node->nid) {
                        unset($word->field_word_list[LANGUAGE_NONE][$key]);
                        node_save($word);
                    }
                }
            }
        }
    }
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function ma_dictionary_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
    if($entity_type == 'node' && $bundle_name == 'dictionary_word') {
        $targets['field_related_dictionary_words:guid_or_nid'] = array(
            'name' => t('Related Dictionary Words (Entity reference by Feeds GUID, failover to NID)'),
            'description' => t('The field instance Related Dictionary Words of field_related_dictionary_words matched by Feeds GUID.  If the GUID is not found, it will be used as a NID'),
            'callback' => 'ma_importexport_set_target',
            'real_target' => 'field_related_dictionary_words',
        );
        $targets['field_dictionary_word_related_dh:guid_or_nid'] = array(
            'name' => t('Related Digital Heritage Items (Entity reference by Feeds GUID, failover to NID)'),
            'description' => t('The field instance Related Digital Heritage Items of field_dictionary_word_related_dh matched by Feeds GUID.  If the GUID is not found, it will be used as a NID'),
            'callback' => 'ma_importexport_set_target',
            'real_target' => 'field_dictionary_word_related_dh',
        );
        $targets['field_word_list:guid_or_nid'] = array(
            'name' => t('Word List (Entity reference by Feeds GUID, failover to NID)'),
            'description' => t('The field instance Word List of field_word_list matched by Feeds GUID.  If the GUID is not found, it will be used as a NID'),
            'callback' => 'ma_importexport_set_target',
            'real_target' => 'field_word_list',
        );
        $targets['og_group_ref:guid_or_nid'] = array(
            'name' => t('Protocol (Entity reference by Feeds GUID, failover to NID)'),
            'description' => t('The field instance Protocol of og_group_ref matched by Feeds GUID.  If the GUID is not found, it will be used as a NID'),
            'callback' => 'ma_importexport_set_target',
            'real_target' => 'og_group_ref',
        );

        // Word entry/paragraph fields
        $targets['field_alternate_spelling'] = array(
            'name' => t('Alternate Spelling for the first word entry (field_alternate_spelling)'),
            'description' => t('The field instance Alternate Spelling of field_alternate_spelling for the first word entry.'),
            'callback' => 'ma_dictionary_set_target',
            'real_target' => 'field_alternate_spelling',
        );
        $targets['field_source'] = array(
            'name' => t('Source for the first word entry (field_source)'),
            'description' => t('The field instance Source of field_source for the first word entry.'),
            'callback' => 'ma_dictionary_set_target',
            'real_target' => 'field_source',
        );
        $targets['field_translation'] = array(
            'name' => t('Translation for the first word entry (field_translation)'),
            'description' => t('The field instance Translation of field_translation for the first word entry.'),
            'callback' => 'ma_dictionary_set_target',
            'real_target' => 'field_translation',
        );
        $targets['field_definition'] = array(
            'name' => t('Definition for the first word entry (field_definition)'),
            'description' => t('The field instance Definition of field_definition for the first word entry.'),
            'callback' => 'ma_dictionary_set_target',
            'real_target' => 'field_definition',
        );
        $targets['field_pronunciation'] = array(
            'name' => t('Pronunciation for the first word entry (field_pronunciation)'),
            'description' => t('The field instance Pronunciation of field_pronunciation for the first word entry.'),
            'callback' => 'ma_dictionary_set_target',
            'real_target' => 'field_pronunciation',
        );
        $targets['field_sample_sentence'] = array(
            'name' => t('Sample sentences for the first word entry (field_sample_sentence)'),
            'description' => t('The field instance Sample Sentences of field_sample_sentence for the first word entry.'),
            'callback' => 'ma_dictionary_set_target',
            'real_target' => 'field_sample_sentence',
        );
        $targets['field_part_of_speech'] = array(
            'name' => t('Part of speech for the first word entry (field_part_of_speech)'),
            'description' => t('The field instance Part of Speech of field_part_of_speech for the first word entry.'),
            'callback' => 'ma_dictionary_set_target',
            'real_target' => 'field_part_of_speech',
        );
        $targets['field_dictionary_word_recording'] = array(
            'name' => t('Recordings for the first word entry (field_dictionary_word_recording)'),
            'description' => t('The field instance Recording of field_dictionary_word_recording for the first word entry.'),
            'callback' => 'ma_dictionary_set_target',
            'real_target' => 'field_dictionary_word_recording',
        );
    }
}


/**
 * Callback for ma_dictionary_feeds_processor_targets_alter
 */
function ma_dictionary_set_target($source, $entity, $target, $value, $mapping)
{
    // Load the first word entry.
    $first_word_entry = NULL;
    $save_paragraph = FALSE;
    
    // If this is an existing item, it will already have a word entry, so reuse that
    if(isset($entity->field_word_entry[LANGUAGE_NONE][0]['value'])) {
        $first_word_entry = entity_load_single('paragraphs_item', $entity->field_word_entry[LANGUAGE_NONE][0]['value']);
        $save_paragraph = TRUE;
    }

    // If not, Drupal will have created us an empty word entry, so we just need to fill in the values
    if($first_word_entry == NULL) {
        $first_word_entry = $entity->field_word_entry[LANGUAGE_NONE][0]['entity'];
    }

    $first_word_entry_wrapper = entity_metadata_wrapper('paragraphs_item', $first_word_entry);

    switch ($target) {
        // Simple text fields, single value
    case 'field_alternate_spelling':
    case 'field_source':
    case 'field_translation':
        $first_word_entry_wrapper->{$target}->set($value[0]);
        break;
        // Long text fields, single value
    case 'field_pronunciation':
        $first_word_entry_wrapper->{$target}->format = 'filtered_html';
        $first_word_entry_wrapper->{$target}->value = $value[0];
        break;
    case 'field_definition':
        $first_word_entry_wrapper->{$target}->set($value[0]);
        break;
        // Multi-value text
    case 'field_sample_sentence':
        $i = 0;
        foreach($value as $v) {
            if(!empty($v)) {
                $first_word_entry_wrapper->{$target}[$i++] = $v;
            }
        }
        break;
    case 'field_part_of_speech':
        $i = 0;
        foreach($value as $part_of_speech) {
            if(!empty($part_of_speech)) {
                $part_of_speech_term = array_shift(taxonomy_get_term_by_name($part_of_speech, 'part_of_speech'));
                if($part_of_speech_term) {
                    $first_word_entry_wrapper->{$target}[$i++] = $part_of_speech_term->tid;
                }
            }
        }
        break;
    case 'field_dictionary_word_recording':
        $i = 0;
        foreach($value as $audio_atom) {
            // Try Recording as a GUID first
            $sid = ma_importexport_feeds_lookup_atom_by_guid($audio_atom);
            if(!empty($sid) && is_numeric($sid)) {
                $atom = scald_atom_load($sid);
            }

            // If using Recording as a GUID didn't work, try it as an atom SID
            if(!$atom) {
                $atom = scald_atom_load($audio_atom);
            }

            // If we found a valid atom, use it as the recording
            if(!empty($atom) && $atom->sid > 0 && $atom->type == 'audio') {
                $first_word_entry_wrapper->{$target}[$i++] = $atom->sid;
            }
        }
        break;
    default:
        break;
    }

    // We only need to save if this was an existing word entry. New word entries will get saved with the host node.
    if($save_paragraph) {
        $first_word_entry->revision = TRUE;
        $first_word_entry->save(TRUE);
        $entity->field_word_entry['und'][0]['revision_id'] = $first_word_entry->revision_id;
    }
}


function _ma_dictionary_flatten_reference_field($field, $lang = LANGUAGE_NONE) {
    $result = array();

    if(isset($field[$lang])) {
        foreach($field[$lang] as $element) {
            $result[] = $element['target_id'];
        }
    }

    return $result;
}

// Helper function to return an array of roles a user has per language community
function _ma_dictionary_get_user_language_communities($account = NULL) {
    $user_language_communities = array();

    if(empty($account)) {
        global $user;
        $account = $user;
    }
    
    $groups = og_get_groups_by_user($account, 'node');
    foreach($groups as $group) {
        $group_node = node_load($group);
        if($group_node->type == 'language_community') {
            $roles = og_get_user_roles('node', $group, $account->uid);
            foreach($roles as $role) {
                if($role == 'language contributor' || $role == 'language steward') {
                    $user_language_communities[$group_node->field_community_language[LANGUAGE_NONE][0]['tid']][] = $role;
                }
            }
        }
    }

    return $user_language_communities;
}

// Helper function to lookup language community nid from language taxonomy id
function _ma_dictionary_get_language_community_from_tid($tid) {
    if(is_numeric($tid) & $tid > 0) {
        $query = new EntityFieldQuery();

        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'language_community')
            ->fieldCondition('field_community_language', 'tid', $tid)
            ->range(0,1);

        $result = $query->execute();

        if(isset($result['node'])) {
            return array_keys($result['node'])[0];
        }
    }
    return NULL;
}
<?php
/**
 * @file
 * Code for the ma_importexport feature.
 */

include_once('ma_importexport.features.inc');

/**
 * Implements hook_menu().
 */
function ma_importexport_menu() {
  $items = array();
  
  // "Export Item" button for DH node
  $items['node/%node/export-item'] = array(
    'title' => 'Export Item',
    'page callback' => 'ma_importexport_export_gui',
    'page arguments' => array(1),
    'access callback' => 'ma_importexport_access_export',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 105,
  );

  return $items;
}


/**
 * Implements hook_feeds_presave().
 */
function ma_importexport_feeds_presave(FeedsSource $source, $entity, $item) {

  // Custom handling of Youtube and Vimeo URLs
  // This code is adapted from _ma_services_create_atom, which itself is adapted from scald provider code as commented there

  if ($entity->type == 'digital_heritage') {

    foreach ($item['media assets'] as $media_asset_index => $media_asset) { // There can be multiple media assets in a single cell, separated by comma (feeds tamper explode), so loop through each

      if (substr ($media_asset, 0, 4) == 'http') { // the individual value must start with http/https in order to be identified as an externally-provided asset

        // A file scald atom has already been created for this by this point. Delete it, and unset the field.
        $already_created_sid = $entity->field_media_asset[LANGUAGE_NONE][$media_asset_index]['sid'];
        entity_delete ('scald_atom', $already_created_sid);
        $entity->field_media_asset[LANGUAGE_NONE][$media_asset_index] = '';

        // Youtube
        if (strpos($media_asset, 'youtube')) {
          $provider = 'youtube';
          $identifier = scald_youtube_parse_id($media_asset, TRUE);
          if ($identifier == FALSE) {
            drupal_set_message ('Skipped media asset due to invalid Youtube ID: ' . $media_asset, 'warning');
            continue;
          };
          if (!$sid = scald_youtube_already_imported($identifier)) {
            $video_identifier = $identifier['id'];
            $infos = scald_youtube_video($video_identifier);
          }
        }

        // Vimeo
        elseif (strpos($media_asset, 'vimeo')) {
          $provider = 'vimeo';
          $vimeo_id = substr(strrchr($media_asset, '/'), 1); // Vimeo parse function expects just the numeric ID, cannot parse whole URL
          $video_identifier = scald_vimeo_parse_id($vimeo_id, TRUE);
          if ($video_identifier == FALSE) {
            drupal_set_message ('Skipped media asset due to invalid Vimeo ID: ' . $media_asset, 'warning');
            continue;
          };
          if (!$sid = scald_vimeo_already_imported($video_identifier)) {
            $infos = scald_vimeo_video($video_identifier);
          }
        }

        // No provider match
        else {
          drupal_set_message ('Skipped media asset due to no matching provider: ' . $media_asset, 'warning');
          continue;
        }


        // Atom does not exist, needs to be created.
        if (!$sid) {
          $atom = new ScaldAtom('video', 'scald_' . $provider);
          $atom->base_id = $video_identifier;
          if (!isset($atom->data)) {
            $atom->data = array();
          }
          if (isset($identifier['list'])) {
            $atom->data['list'] = $identifier['list'];
          }
          $atom->title = $infos->title;

          // Save video width and height.
          $atom->data['video_width'] = $infos->width;
          $atom->data['video_height'] = $infos->height;

          // Download a copy of the video thumbnail. This makes it possible
          // to do interesting manipulation with image styles presets.
          $thumb = drupal_http_request($infos->thumbnail['src']);
          if ($thumb->code == 200 && $directory = ScaldAtomController::getThumbnailPath('video')) {
            $dest = $directory . '/' . $provider . '-' . $infos->id . '.jpg';
            $file = file_save_data($thumb->data, $dest);

            if ($file) {
              // Set the file status to temporary.
              $query = db_update('file_managed')
                ->condition('fid', $file->fid)
                ->fields(array('status' => 0))
                ->execute();
              $langcode = field_language('scald_atom', $atom, 'scald_thumbnail');
              $atom->scald_thumbnail[$langcode][0] = (array) $file;
            }
          }

          if (!$sid = scald_atom_save($atom)) {
            drupal_set_message ('Unable to save atom for: ' . $provider, 'warning');
            continue;
          }
        }

        // Set the Scald ID in the DH item's Media Asset field
        $entity->field_media_asset[LANGUAGE_NONE][$media_asset_index]['sid'] = $sid;

      }
    }
  }


  if($entity->feeds_item->entity_type == 'scald_atom') {
    if($entity->feeds_item->id == 'import_media_audio') {
      $type = 'audio';
    } elseif($entity->feeds_item->id == 'import_media_video') {
      $type = 'video';
    } else {
      return;
    }

    $path = ScaldAtomController::getThumbnailPath($type);
    try {
      $data = file_get_contents($entity->{'Temporary target 1'});
      $destination = (substr($path, -1) === '/' ? $path : $path . '/') . basename(urldecode($entity->{'Temporary target 1'}));
      $file = file_save_data($data, $destination, FILE_EXISTS_RENAME);
    } catch (Exception $e) {
      watchdog_exception('Feeds', $e, nl2br(check_plain($e)));
    }

    $entity->base_id = $file->fid;
    $entity->file_source = $file->uri;
    $entity->data[$type . '_file'] = $file->uri;
    $entity->data[$type . '_id'] = $file->fid;
  }
}

function ma_importexport_export_form_submit($form, &$form_state)
{
  $items = $form['dh_export']['items']['#value'];
  $format = $form['dh_export']['format']['#value'];
  $options = array();
  if($format = 'csv') {
    $options['multivalue_delimiter'] = $form['dh_export']['csvdelimiter']['#value'];
  }
  ma_importexport_digital_heritage_node_export($items, $format, $options);
}

function ma_importexport_export_form($form, &$form_state, $items, $format="csv") {
  $form = array();

  $form['dh_export']['items'] = array( '#type' => 'hidden', '#value' => $items);

  // Export Format
  $options = array('csv' => t('CSV'), 'xml' => t('XML'), 'json' => t('JSON'));

  $form['dh_export']['format'] = array( '#type' => 'radios',
  					'#title' => t('Export Format'),
  					'#default_value' => $format,
  					'#options' => $options,
  					);

  $form['dh_export']['format']['xml']['#attributes']['disabled'] = 'disabled';
  $form['dh_export']['format']['json']['#attributes']['disabled'] = 'disabled';

  $form['dh_export']['csvdelimiter'] = array('#type' => 'textfield',
					     '#title' => t('CSV column multi-value delimiter'),
					     '#default_value' => '||',
					     '#size' => 4,
					     '#maxlength' => 10);					     
  
  $form['dh_export']['export'] = array( '#type' => 'submit',
					'#value' => t('Export'),
					);
					

  return $form;
}

function ma_importexport_export_gui($items = NULL, $format = 'csv', $delivery = NULL) {
  if (is_int($items)) {
    $items = array($items);
  }
  elseif (is_object($items)) {
    $items = array($items->nid);
  }					

  return drupal_get_form('ma_importexport_export_form', $items, $format);
}

function ma_importexport_access_export($node) {
  global $user;
  if (is_int($node)) {
    $node = node_load($node);
  }

  if (function_exists('drush_main')) {
    // Always allow drush to export nodes.
    $access = TRUE;
  }
  else {
    // Check basic role permissions first.
    $access = TRUE;
    //    $access = (user_access('export nodes') || ($user->uid && ($node->uid == $user->uid) && user_access('export own nodes')));
    // Make sure the user can view the original node content.
    $access = $access && node_access('view', $node);
  }

  // Let other modules alter this - for example to only allow some users
  // to export specific nodes or types.
  //  drupal_alter("node_export_access_export", $access, $node);
  return $access;
}

function ma_importexport_digital_heritage_field_export($item, $field_name) {
  $result = array();

  // Strip off ':etid' suffix that Entity Reference puts on the field name to make things easier
  $field_name = str_replace(':etid', '', $field_name);
  
  switch($field_name) {
  case 'title':
    $result[] = $item->title;
    break;
  case 'nid':
    $result[] = $item->nid;
    break;
  case 'body':
    foreach($item->{$field_name}[$item->language] as $field_value) {
      $result[] = $field_value['value']; 
    }
    break;
  case 'field_media_asset':
    foreach($item->{$field_name}[LANGUAGE_NONE] as $field_value) {
      $result[] = $field_value['sid']; 
    }
    break;
  case 'field_category':
  case 'field_tags':
    foreach($item->{$field_name}[$item->language] as $term) {
      $result[] = taxonomy_term_load($term['tid'])->name;
    }
    break;
  case 'field_creator':
  case 'field_contributor':
  case 'field_dh_type':
  case 'field_format':
  case 'field_language':
  case 'field_publisher':
  case 'field_subject':
    foreach($item->{$field_name}[LANGUAGE_NONE] as $term) {
      $result[] = taxonomy_term_load($term['tid'])->name;
    }
    break;
  case 'field_book_children':
  case 'field_book_parent':
  case 'field_collection':
  case 'field_community_record_children':
  case 'field_community_record_parent':
  case 'field_related_dh_items':
  case 'og_group_ref':
    foreach($item->{$field_name}[LANGUAGE_NONE] as $ref) {
      $result[] = $ref['target_id'];
    }
    break;
  case 'field_community_ref':
    foreach($item->{$field_name}[LANGUAGE_NONE] as $ref) {
      $result[] = $ref['nid'];
    }
    break;
  case 'field_coverage':
    foreach($item->{$field_name}[LANGUAGE_NONE] as $ref) {
      $result[] = $ref['geom'];
    }
    break;
  case 'field_coverage:lat':
    foreach($item->field_coverage[LANGUAGE_NONE] as $ref) {
      $result[] = $ref['lat'];
    }
    break;
  case 'field_coverage:lon':
    foreach($item->field_coverage[LANGUAGE_NONE] as $ref) {
      $result[] = $ref['lon'];
    }
    break;    
  default:
    foreach($item->{$field_name}[LANGUAGE_NONE] as $field_value) {
      $result[] = $field_value['value']; 
    }
  }

  return $result;
}

/**
 * Takes an array of items (nids) and exports them to the desired format
 */
function ma_importexport_digital_heritage_node_export($items, $format = 'csv', $options = NULL, $msg_t = 't') {
  global $user;

  if($format == 'csv') {
    if(isset($options['multivalue_delimiter'])) {
      $multivalue_delimiter = $options['multivalue_delimiter'];
    } else {
      $multivalue_delimiter = '||';
    }
  }
  
  if (is_int($items)) {
    $items = array($items);
  }
  elseif (is_object($items)) {
    $items = array($items->nid);
  }

  // Add any related items we need to export as well
  // TODO: restructure this to avoid looping over and loading all nodes twice
  $related_items = array();
  foreach($items as $item) {    
    $original_node = node_load($item);
    if(!empty($original_node->field_community_record_children)) {
      $related_items = array_merge($related_items, ma_importexport_digital_heritage_field_export($original_node, 'field_community_record_children'));
    }
    if(!empty($original_node->field_community_record_parent)) {
      $related_items = array_merge($related_items, ma_importexport_digital_heritage_field_export($original_node, 'field_community_record_parent'));
    }
    if(!empty($original_node->field_book_children)) {
      $related_items = array_merge($related_items, ma_importexport_digital_heritage_field_export($original_node, 'field_book_children'));
    }
    if(!empty($original_node->field_book_parent)) {
      $related_items = array_merge($related_items, ma_importexport_digital_heritage_field_export($original_node, 'field_book_parent'));
    }
  }

  // Merge and dedup list of top level items and related items
  $dh_items = array_merge($items, $related_items);
  $dh_items = array_unique($dh_items);

  // Get list of DH field names
  $dhfields = field_info_instances('node', 'digital_heritage');
  
  $mapping = ma_importexport_get_digital_heritage_mapping();
  $export_items = array();
  
  // Add headers
  foreach($mapping as $f => $h) {
    $export_items['headers'][$f] = $h;
  }
  
  // Process Items
  foreach ($dh_items as $item) {
    $original_node = node_load($item);
    
    if (!ma_importexport_access_export($original_node)) {
      $error = $msg_t("You do not have permission to export one or more of these items.  No items exported.");
      return array(
        'success' => FALSE,
        'output' => array($error),
      );
    }

    $export_item = array();

    // Loop through the fields we want to export
    foreach($mapping as $dhfield => $dhmap) {
      $field_export = NULL;
      $field_export = ma_importexport_digital_heritage_field_export($original_node, $dhfield);
      $export_item[$dhfield] = $field_export;
    }

    $export_items['items'][] = $export_item;
  }

  // Export all media
  $media_sids = array();
  foreach($export_items['items'] as $export_item) {
    foreach($export_item['field_media_asset'] as $media) {
      if(!in_array($media, $media_sids)) {
	$media_sids[] = $media;
      }
    }
  }
  
  $exported_media = ma_importexport_load_scald_atoms($media_sids);
  
  ma_importexport_export_csv($export_items, $exported_media, $multivalue_delimiter);
  
  drupal_set_message(t('Exported ') . $original_node->title);
}


/**
 * Take an array of scald sids and return an array of loaded scald atoms
 *
 * @param array $sids
 *    The array of scald sids
 *
 * @return
 *  An array of loaded scald atoms
 */
function ma_importexport_load_scald_atoms($sids) {
  if (is_int($sids)) {
    $sids = array($sids);
  }
  elseif (is_object($sids)) {
    $sids = array($sids->sid);
  }

  $exported_media = array();
  foreach($sids as $sid) {
    $atom = scald_atom_load($sid);
    $exported_media[] = $atom;
  }

  return $exported_media;
}


// SCT: delete this
function ma_importexport_export_csv_old($export_items, $delimiter='||') {
  //drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  //  drupal_add_http_header('Content-Disposition', 'attachment;filename=csvfiles.csv');

  // Prevent Devel from messing us up.
  $GLOBALS['devel_shutdown'] = TRUE;
  
  // Set the headers to indicate this is a CSV file.
  header('Content-type: text/csv; charset=UTF-8');
  header('Content-Disposition: attachment; filename=item_export.csv');
  header('Pragma: no-cache');
  header('Expires: 0');
  
  $output = fopen('php://output', 'w');

  // Write headers
  $headers = array();
  foreach($export_items['items'][0] as $key => $name) {
    $headers[] = $export_items['headers'][$key] ? $export_items['headers'][$key] : $key;
  }

  fputcsv($output, $headers);

  // Write items
  foreach($export_items['items'] as $item) {
    $item_array = array();
    foreach($item as $field => $value) {
      $item_array[] = implode($delimiter, $value);
    }
    fputcsv($output, $item_array);
  }
  
  fclose($output);
  drupal_exit();
}

function ma_importexport_get_digital_heritage_mapping() {
  ctools_include('export');

  // Load mapping from Digial Heritage Metadata importer to look up header names
  $mapping = array();
  if ($config = ctools_export_load_object('feeds_importer', 'conditions', array('id' => 'digital_heritage_metadata'))) {
    $config = array_shift($config);
    foreach($config->config['processor']['config']['mappings'] as $map) {
      $mapping[$map['target']] = $map['source'];
    }
  }

  $mapping['nid'] = 'nid';
  return $mapping;
}

function ma_importexport_get_atom_field_mapping($type) {
  ctools_include('export');

  switch($type) {
    case 'image':
      $importer_id = 'import_media_images';
      break;
    case 'audio':
      $importer_id = 'import_media_audio';
      break;
    case 'video':
      $importer_id = 'import_media_video';
      break;
    case 'file':
      $importer_id = 'import_media_files';
      break;
    default:
      $importer_id = '';
    }
  
  $mapping = array();

  // Force some fields
  $mapping['sid'] = 'sid';

  
  if ($config = ctools_export_load_object('feeds_importer', 'conditions', array('id' => $importer_id))) {
    $config = array_shift($config);
    foreach($config->config['processor']['config']['mappings'] as $map) {
      $mapping[$map['target']] = $map['source'];
    }
  }

  if(isset($mapping['field_scald_created:start'])) {
    unset($mapping['field_scald_created:start']);
  }

  // Force bundle specific field changes
  switch($type) {
  case 'image':
    $mapping['field_scald_protocol'] = $mapping['og_group_ref:etid'];
    unset($mapping['og_group_ref:etid']);
    $mapping['scald_thumbnail'] = $mapping['scald_thumbnail:uri'];
    unset($mapping['scald_thumbnail:uri']);
    $mapping['field_original_dng'] = $mapping['field_original_dng:uri'];
    unset($mapping['field_original_dng:uri']);
    $mapping['field_archival_tiff'] = $mapping['field_archival_tiff:uri'];
    unset($mapping['field_archival_tiff:uri']);
    $mapping['field_full_size_jpeg'] = $mapping['field_full_size_jpeg:uri'];
    unset($mapping['field_full_size_jpeg:uri']);
    break;
  case 'audio':
    break;
  case 'video':
    break;
  case 'file':    
    break;
  }
  
  return $mapping;
}

function ma_importexport_atom_field_export($atom, $field_name, $mapping = array()) {
  global $language;

  if(is_null($atom)) {
    return (isset($mapping[$field_name])) ? array($mapping[$field_name]) : array($field_name);
  }

  $result = array();

  switch($field_name) {
  case 'sid':
    $result[] = $atom->sid;
    break;
  case 'title':
    $result[] = $atom->{$field_name};
    break;
  case 'scald_thumbnail':
  case 'field_original_dng':
  case 'field_archival_tiff':
  case 'field_full_size_jpeg':
    if(isset($atom->{$field_name}[LANGUAGE_NONE])) {
      $media_dir = 'media/' . $atom->type . '/' . $atom->sid . '/';
      $result[] = $media_dir . $atom->{$field_name}[LANGUAGE_NONE][0]['filename'];
    }
    break;
  case 'scald_thumbnail:uri':
    if(isset($atom->scald_thumbnail[LANGUAGE_NONE])) {
      $media_dir = 'media/' . $atom->type . '/' . $atom->sid . '/';
      $result[] = $media_dir . $atom->scald_thumbnail[LANGUAGE_NONE][0]['filename'];
    }
    break;
  case 'field_scald_geo_location:lat':
    foreach($atom->field_scald_geo_location[LANGUAGE_NONE] as $field_value) {
      $result[] = $field_value['lat'];
    }
    break;
  case 'field_scald_geo_location:lon':
    foreach($atom->field_scald_geo_location[LANGUAGE_NONE] as $field_value) {
      $result[] = $field_value['lon'];
    }
    break;    
  case 'field_scald_protocol':
  case 'og_group_ref':
    foreach($atom->{$field_name}[LANGUAGE_NONE] as $ref) {
      $result[] = $ref['target_id'];
    }    
    break;
  case 'og_group_ref:etid':
    foreach($atom->field_scald_protocol[LANGUAGE_NONE] as $ref) {
      $result[] = $ref['target_id'];
    }    
    break;
  case 'field_category':
    foreach($atom->{$field_name}[$language->language] as $term) {
      $result[] = taxonomy_term_load($term['tid'])->name;
    }
    break;
  case 'scald_tags':
  case 'scald_authors':
    foreach($atom->{$field_name}[LANGUAGE_NONE] as $term) {
      $result[] = taxonomy_term_load($term['tid'])->name;
    }
    break;
  case 'Temporary target 1':
  case 'scald_file:uri':
    $media_dir = 'media/' . $atom->type . '/' . $atom->sid . '/';
    if($atom->type == 'video') {
      $result[] = $media_dir . basename($atom->data['video_file']);
    } else {
      $result[] = $media_dir . $atom->base_entity->filename;
    }
    break;
  default:
    foreach($atom->{$field_name}[LANGUAGE_NONE] as $field_value) {
      $result[] = $field_value['value']; 
    }
  }
  return $result;
}

function ma_importexport_write_atom_csv($csv_file, $type, $atom = NULL, $delimiter='||') {
  $fields = field_info_instances('scald_atom',$type);
  $mapping = ma_importexport_get_atom_field_mapping($type);

  $row = array();
  foreach($mapping as $field_name => $field) {
    $row[] = implode($delimiter, ma_importexport_atom_field_export($atom, $field_name, $mapping));
  }

  fputcsv($csv_file, $row);
}

/**
 * Exports a set of digital heritage items and scald atoms to CSV
 *
 * @param array $export_items
 *   The array of Digtal Heritage items to export to CSV
 *
 * @param array $media_items
 *   The array of Scald atoms (sids) to export to CSV
 *
 * @param string $delimiter
 *   The glue string to use as a delimiter between multivalue terms
 */
function ma_importexport_export_csv($export_items, $media_items, $delimiter='||') {
  //drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  //  drupal_add_http_header('Content-Disposition', 'attachment;filename=csvfiles.csv');

  // Prevent Devel from messing us up.
  $GLOBALS['devel_shutdown'] = TRUE;

  // Write DH CSV
  $dh_temp_file = tempnam(sys_get_temp_dir(),'MUKURTUEXPORT');
  $output = fopen($dh_temp_file, 'w');

  // Write column headers
  $headers = array();
  foreach($export_items['items'][0] as $key => $name) {
    $headers[] = $export_items['headers'][$key] ? $export_items['headers'][$key] : $key;
  }
  fputcsv($output, $headers);

  // Write items to rows
  foreach($export_items['items'] as $item) {
    $item_array = array();
    foreach($item as $field => $value) {
      $item_array[] = implode($delimiter, $value);
    }
    fputcsv($output, $item_array);
  }
  
  fclose($output);

  $export_files = array(array('filename' => $dh_temp_file, 'localname' => 'digitalheritage.csv'));

  // media
  $scald_image_temp = tempnam(sys_get_temp_dir(),'MUKURTUEXPORT');
  $scald_image_output = fopen($scald_image_temp, 'w');
  
  $scald_audio_temp = tempnam(sys_get_temp_dir(),'MUKURTUEXPORT');
  $scald_audio_output = fopen($scald_audio_temp, 'w');
  
  $scald_video_temp = tempnam(sys_get_temp_dir(),'MUKURTUEXPORT');
  $scald_video_output = fopen($scald_video_temp, 'w');
  
  $scald_file_temp = tempnam(sys_get_temp_dir(),'MUKURTUEXPORT');
  $scald_file_output = fopen($scald_file_temp, 'w');
  
  $scald_image_count = 0;
  $scald_audio_count = 0;
  $scald_video_count = 0;
  $scald_file_count = 0;

  // Write headers
  ma_importexport_write_atom_csv($scald_image_output, 'image');
  ma_importexport_write_atom_csv($scald_audio_output, 'audio');
  ma_importexport_write_atom_csv($scald_video_output, 'video');
  ma_importexport_write_atom_csv($scald_file_output, 'file');
  
  foreach($media_items as $atom) {
    switch($atom->type) {
    case 'image':
      ma_importexport_write_atom_csv($scald_image_output, 'image', $atom);
      $scald_image_count++;
      break;
    case 'audio':
      ma_importexport_write_atom_csv($scald_audio_output, 'audio', $atom);
      $scald_audio_count++;
      break;
    case 'video':
      ma_importexport_write_atom_csv($scald_video_output, 'video', $atom);
      $scald_video_count++;      
      break;
    case 'file':
      ma_importexport_write_atom_csv($scald_file_output, 'file', $atom);
      $scald_file_count++;      
      break;
    default:
    }

    // Copy Thumbnails
    foreach($atom->scald_thumbnail[LANGUAGE_NONE] as $thumbnail) {
      $tempmedia = tempnam(sys_get_temp_dir(), 'MUKURTUEXPORT');
      $tempmedia = file_unmanaged_copy($thumbnail['uri'], $tempmedia, FILE_EXISTS_REPLACE);
      if($tempmedia) {
	$media_dir = 'media/' . $atom->type . '/' . $atom->sid . '/';
	$export_files[] = array('filename' => $tempmedia, 'localname' => $media_dir. $thumbnail['filename']); 
      }
    }

    // Copy base entity file
    if(isset($atom->base_entity)) {
      $tempmedia = tempnam(sys_get_temp_dir(), 'MUKURTUEXPORT');
      $tempmedia = file_unmanaged_copy($atom->base_entity->uri, $tempmedia, FILE_EXISTS_REPLACE);
      if($tempmedia) {
	$media_dir = 'media/' . $atom->type . '/' . $atom->sid . '/';
	$export_files[] = array('filename' => $tempmedia, 'localname' => $media_dir. $atom->base_entity->filename);
      }
    }

    // Copy video
    if(isset($atom->data['video_file'])) {
      $tempmedia = tempnam(sys_get_temp_dir(), 'MUKURTUEXPORT');
      $tempmedia = file_unmanaged_copy($atom->data['video_file'], $tempmedia, FILE_EXISTS_REPLACE);
      if($tempmedia) {
	$media_dir = 'media/' . $atom->type . '/' . $atom->sid . '/';
	$export_files[] = array('filename' => $tempmedia, 'localname' => $media_dir. basename($atom->data['video_file']));
      }
    }
    

  }

  fclose($scald_image_output);
  fclose($scald_audio_output);
  fclose($scald_video_output);
  fclose($scald_file_output);
  
  if($scald_image_count > 0) {
    $export_files[] = array('filename' => $scald_image_temp, 'localname' => 'media_images.csv'); 
  }
  if($scald_audio_count > 0) {
    $export_files[] = array('filename' => $scald_audio_temp, 'localname' => 'media_audio.csv');
  }
  if($scald_video_count > 0) {
    $export_files[] = array('filename' => $scald_video_temp, 'localname' => 'media_video.csv');
  }
  if($scald_file_count > 0) {
    $export_files[] = array('filename' => $scald_file_temp, 'localname' => 'media_files.csv'); 
  }
  
  ma_importexport_download_zip($export_files);
  //drupal_exit();
}

function ma_importexport_download_zip($files) {
    $zip = new ZipArchive();

    $tempfile = tempnam(sys_get_temp_dir(),'MUKURTUZIP');
    $zip->open($tempfile, ZipArchive::CREATE);

    foreach($files as $file) {
      $export_file = file_get_contents($file);
      $zip->addFile($file['filename'], $file['localname']);
    }

    $zip->close();
    header('Content-disposition: attachment; filename=export.zip');
    header('Content-type: application/zip');
    readfile($tempfile);

    // Delete tempfiles
    foreach($files as $file) {
      unlink($file['filename']);
    }
    drupal_exit();
}
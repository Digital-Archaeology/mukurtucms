<?php
/**
 * @file
 * Code for the Mukurtu Single Digital Heritage Browse Page feature.
 */

include_once 'ma_single_browse_page.features.inc';


/**
 * Implements hook_menu().
 */
function ma_single_browse_page_menu() {
  $items = array();

  // Callback that toggles the display of the Related Items teasers
  $items['admin/toggle-custom-date-required'] = array(
    'title' => 'Toggle Custom Date Required',
    'page callback' => 'ma_single_browse_page_toggle_custom_date_required',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );

  return $items;
}

function ma_single_browse_page_toggle_custom_date_required () {
  if (variable_get('mukurtu_dh_custom_date_required')) {
    variable_set ('mukurtu_dh_custom_date_required', 0);
  }
  else {
    variable_set ('mukurtu_dh_custom_date_required', 1);
  }
  drupal_goto ('dashboard');
}


/**
 * Implements hook_block_view_alter().
 */
function ma_single_browse_page_block_view_alter(&$data, $block) {

  // Hide some blocks on the single browse page.
  // Note, other content is being not rendered via page--browse.tpl.php.
  if (current_path() == 'browse') {
    switch ($block->bid) {
      case 'views-communities_content-block_1';
      case 'boxes-ma_site_header';
        $data['content'] = '';
        break;
    }
  }

}


/**
 * Implementation of hook_block_info().
 */
function ma_single_browse_page_block_info() {
  $blocks['single_browse_page_legend'] = array(
    'info' => t('Single Browse Page Legend'),
  );
  $blocks['single_browse_page_filters'] = array(
    'info' => t('Single Browse Page Filters'),
  );
  $blocks['single_browse_page_list_and_sort'] = array(
    'info' => t('Single Browse Page List View with sort Form'),
  );
  $blocks['single_browse_page_content_tab'] = array(
    'info' => t('Single Browse Page Content Tab'),
  );
  return $blocks;
}


/**
 * Implementation of hook_block_view().
 */
function ma_single_browse_page_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'single_browse_page_legend':
      $block['subject'] = t('Legend');
      $block['content'] = "content";
      break;

    case 'single_browse_page_filters':
      $block['subject'] = t('Filters');

      $search_form_block = module_invoke('views', 'block_view', '-exp-digital_heritage_grid_list-single_browse_page_dh_list');
      $block['content'] = '<h4>' . 'Search' . '</h4>' . render($search_form_block['content']);

      $facets_map = array_flip(facetapi_get_delta_map());
      $facet_name_prefix = 'search_api@default_node_index:block:';
      $facets_to_render = array(
        'field_community_ref' => 'Community',
        'field_collection' => 'Collection',
        'field_category' => 'Category',
        'dh_original_year' => 'Original Year',
        'field_dh_type' => 'Type',
        'field_media_asset%3Atype' => 'Media Type',
        'field_tags' => 'Keywords'
      );
      foreach ($facets_to_render as $facet => $facet_title) {
        $facet_block = module_invoke('facetapi', 'block_view', $facets_map[$facet_name_prefix . $facet]);
        if ($facet_block['content']) {
          $block['content'] .= '<h4>' . $facet_title . '</h4>' . render($facet_block['content']);
        }
      }
      break;

    case 'single_browse_page_list_and_sort':
      $block['content'] = '<h4>Sort by</h4>';
      $block['content'] .= drupal_render(drupal_get_form('ma_single_browse_page_dh_list_sort_form'));
      $block['content'] .= views_embed_view('digital_heritage_grid_list', 'single_browse_page_dh_list');
      break;

    case 'single_browse_page_content_tab':
      $content = '';

      $options =  array(
        'query' =>  array(
          'destination' => '',
        ),
        'attributes' => array(
          'class' => 'colorbox-node',
          //'data-inner-width' => "100%",
          //'data-inner-height' => "100%"
        )
      );

      global $user;
      if (!$user->uid) {
        
        $content .= l ('Register', 'user/register', $options);
        $content .= "<br />" . l ('Login', 'user/login', $options);
        $content .= "<br />" . l ('Request new password', 'user/login', $options);

      }
      else {
        $content .= l ('Logout', 'user/logout');
        $content .= "<br />" . l ('Profile', 'user/' . $user->uid, $options);
      }

      $block['content'] = $content;
      break;


  }
  return $block;
}

/**
 * Returns the render array for the form.
 */
function ma_single_browse_page_dh_list_sort_form($form, &$form_state) {
  $sort_options = array(
    'newest' => t('Newest'),
    'oldest' => t('Oldest'),
    'added' => t('Date Added'),
    'changed' => t('Date Changed'),
    'title' => t('Title'),
  );
  // Only show the Newest and Oldest sorts if the DH Custom Date field is required, because if it unset, date = 0, so those DH nodes will appear at top of Oldest list.
  // Newest still works, but Oldest without Newest will just have people asking for Oldest, so take them both out.
  // This is a limitation of using the DB for the Search API backend. It should be resolveable when / if switching to SOLR.
  if (!variable_get('mukurtu_dh_custom_date_required')) {
    unset ($sort_options['newest']);
    unset ($sort_options['oldest']);
  }
  $form['sort'] = array(
  '#type' => 'select',
  '#default_value' => $_SESSION['dh_sort_order'] ?: 'changed',
  '#options' => $sort_options,
  '#attributes' => array('onchange' => 'this.form.submit();'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('class' => array('element-invisible')),
  );
  return $form;
}

function ma_single_browse_page_dh_list_sort_form_submit($form, $form_state){
  if (isset ($form_state['values']['sort'])) {
    $_SESSION['dh_sort_order'] = $form_state['values']['sort'];
  }
}

/*
 * Implements hook_search_api_query_alter().
 */
function ma_single_browse_page_search_api_query_alter(SearchApiQueryInterface $query) {
  $search_id = $query->getOption('search id');

  // Single Browse Page List View
  if ($search_id == "search_api_views:digital_heritage_grid_list:single_browse_page_dh_list") {

    // Sort according to the session var, otherwise fallback to default
    $arg_sort = $_SESSION['dh_sort_order'];
    if (isset ($arg_sort)) {

      // Unset existing sorts
      $sort =& $query->getSort();
      $sort = array();

      // Sort map
      $sort_map = array(
        'title' => array(
          'sort' => 'sort_title',
        ),
        'changed' => array(
          'sort' => 'changed',
          'reverse' => TRUE,
        ),
        'added' => array(
          'sort' => 'created',
          'reverse' => TRUE,
        ),
        'oldest' => array(
          'sort' => 'field_original_date:timestamp',
        ),
        'newest' => array(
          'sort' => 'field_original_date:timestamp',
          'reverse' => TRUE,
        ),
      );
      $sort_direction = 'ASC';
      if ($sort_map[$arg_sort]['reverse']) {
        $sort_direction = 'DESC';
      }
      $query->sort($sort_map[$arg_sort]['sort'], $sort_direction);
    }
  }
}

/**
 * Implements hook_ds_fields_info().
 */
function ma_single_browse_page_ds_fields_info($entity_type) {
  $fields = array();

  $fields['node']['more_link_to_modal_node'] = array(
    'title' => t('More link to modal node'),
    'ui_limit' =>  array('digital_heritage|single_page_right_column_dh'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'ma_single_browse_page_more_link_to_modal_node',
  );

  return $fields;
}

function ma_single_browse_page_more_link_to_modal_node($field) {
  $entity = $field['entity'];
  return l ('More', 'node/' . $entity->nid . '', array(
    'attributes' => array(
      'class' => 'colorbox-node',
      'data-inner-width' => "100%",
      'data-inner-height' => "100%"
    )
  ));
}

<?php
/**
 * @file
 * Code for the Mukurtu Profile feature.
 */

include_once 'ma_profile.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_profile_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Remove the "administator" role option from the user registration form to discourage Mukurtu Admins from creating new administrators
  if(!in_array('administrator', $user->roles)) {
    foreach($form['account']['roles']['#options'] as $rid => $role_name) {
      if($role_name === 'administrator') {
	      unset($form['account']['roles']['#options'][$rid]);
      }
    }
  }

  // Only show communities for the group ref field
  $communities_only = $form['og_user_node'][LANGUAGE_NONE]['#options']['Community'];
  $form['og_user_node'][LANGUAGE_NONE]['#options'] = $communities_only;

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_profile_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Disable the "administator" role option from the edit user profile form to discourage Mukurtu Admins from granting/revoking administrator privileges
  if(!in_array('administrator', $user->roles)) {
    foreach($form['account']['roles']['#options'] as $rid => $role_name) {
      if($role_name === 'administrator') {
	      $form['account']['roles'][$rid]['#disabled'] = TRUE;
      }
    }
  }
  // Only show communities for the group ref field, and add a submit handler to add the user's protocols back after the form is submitted
  $communities_only = $form['og_user_node'][LANGUAGE_NONE]['#options']['Community'];
  $form['og_user_node'][LANGUAGE_NONE]['#options'] = $communities_only;
  $form['#submit'][] = 'ma_profile_add_protocols_back_in';
}


/**
 * Custom submit handler
 */
function ma_profile_add_protocols_back_in(&$form, &$form_state) {
  $non_community_groups = array();
  foreach ($form['og_user_node'][LANGUAGE_NONE]['#default_value'] as $gid) {
    $group = node_load($gid);
    if ($group->type <> 'community') {
      $non_community_groups[] = array('target_id' => $gid);
    }
  }
  if (isset($non_community_groups)) {
    // Unable to get to get form_set_value to work here or in a validation hook, so save the non-community groups to a $session var and add them back in on the user_presave
    $_SESSION['non-community_groups_to_add_back'] = $non_community_groups;
  }
}

/**
 * Implements hook_user_presave().
 */
function ma_profile_user_presave(&$edit, $account, $category) {

  // Add back in any non-community groups from ma_profile_add_protocols_back_in
  if (isset ($_SESSION['non-community_groups_to_add_back'])) {
    $edit['og_user_node'][LANGUAGE_NONE] = array_merge($edit['og_user_node'][LANGUAGE_NONE], $_SESSION['non-community_groups_to_add_back']);
    unset ($_SESSION['non-community_groups_to_add_back']);
  }
}

/**
 * Implements hook_user_view().
 */
function ma_profile_user_view($account, $view_mode, $langcode) {
  if ($view_mode == 'full') {

    // Only show Community nodes (not CPs) when viewing a user profile page under the "Communities" field (which is actually a field that contains all the users groups)
    foreach ($account->og_user_node[LANGUAGE_NONE] as $group) {
      $group_node = node_load ($group['target_id']);
      if ($group_node->type <> 'community') {
        unset ($account->content['og_user_node'][0]['#items'][$group['target_id']]);
      }
    }
    // If no groups are left, then hide the whole field
    if (count($account->content['og_user_node'][0]['#items']) == 0) {
      unset ($account->content['og_user_node']);
    }
  }
}


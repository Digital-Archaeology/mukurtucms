<?php

/**
 * @file
 * Code for the Murkutu Scald feature.
 */

include_once 'ma_scald.features.inc';

/**
 * Implements hook_ds_fields_info().
 */
function ma_scald_ds_fields_info($entity_type) {
  $fields = array();

  // Custom DS field to download atom
  $fields['download_atom'] = array(
    'title' => t('Scald Atom Download Link'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|ma_colorbox'),
    'function' => 'ma_scald_atom_download_link',
  );

  return array('scald_atom' => $fields);
}

/**
 * Render the atom Download link
 */
function ma_scald_atom_download_link($field) {
  $entity = $field['entity'];

  // For some baffling reason, this link is getting rendered for uploaded videos on the search page, despite admin/structure/scald/video/display/ma_scald_search_results clearly not having the download field, so just skip out of it here
  if ($field['view_mode'] <> 'ma_colorbox') {
    return;
  }

  // Do not render the download link for the 3rd party embedded videos
  if ($field['bundle'] == 'video' AND $entity->provider <> 'scald_video') {
    return;
  }
  return l('Download', file_create_url ($entity->file_source));
}

/**
 * Implements hook_form_ID_alter().
 */
// Since these are hardcoded into the audio and video forms, hook here to change file system paths to private when uploading such
function ma_scald_form_scald_atom_add_form_add_alter(&$form, &$form_state) {
  if ($upload_location = $form['file']['#upload_location']) {
    $form['file']['#upload_location'] = str_replace('public', 'private', $upload_location);
  }
}

/**
 * Implements hook_field_group_pre_render().
 */
function ma_scald_field_group_pre_render (&$element, $group, &$form) {

  // Rewrite the scald metadata fieldgroup as a popup, leveraging the popup module's API
  if ($group->group_name == 'group_scald_atom_metadata') {

    // Order the fields according to their weight
    $ordered_fields = array();
    foreach ($element as $field_name => $field) {
      $ordered_fields[$field['#weight']] = $field_name;
    }
    ksort ($ordered_fields);

    // Render each field, adding it to the output
    $output = "";
    foreach ($ordered_fields as $ordered_field) {
      $output .= render($element[$ordered_field]);
    }

    // Render the popup, rewriting the fieldgroup's output
    require_once drupal_get_path('module', 'popup') . '/includes/popup.api.inc';
    $popup_attributes = array ( // See the popup module's readme for more options
      'width' => 420,
      #'effect' => 'slide-down', // not sure if I like this
      'empty-body' => 'none',
    );
    $link_text = '<div class="field-label">' . ucfirst ($group->bundle) . " Metadata" . '</div>';
    $element['#markup'] = popup_element($link_text, $output, $popup_attributes);
  }
}

/**
 * Implements hook_form_alter().
 */
function ma_scald_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'scald_atom_add_form_options') {
    $atom_index = 0;
    while (isset($form['atom' . $atom_index])) {

      // Restrict CP nodes the scald item can be placed into according to the user's CP perms (otherwise by default it will allow all CPs the user is a member of)
      $cp_options = ma_cultural_protocol_get_cps_user_can_post_to ();
      $form['atom' . $atom_index]['field_scald_protocol'][LANGUAGE_NONE]['#options'] = $cp_options;
      // Provide a description that's NOT a popup for the protocol field
      $form['atom' . $atom_index]['field_scald_protocol']['#suffix'] = '<div class = "atom-protocol-desc">' . t("Atoms are open by default. The Protocol field lets you restrict who sees the atom, and who can re-use the atom in their own Digital Heritage items. This permission is independent of the Digital Heritage's Cultural Protocol. In general it is best to leave this open. If you select multiple Protocols, users with access to ANY of the Protocols will be able to see this item.") . '</div>';
      // Hide the old protocol field
      $form['atom' . $atom_index]['og_group_ref']['#access'] = FALSE;

      // Do not show the per-scald actions checkboxes (view, edit, fetch, delete). This is TMI in the form. Default values come from per scald type in the atom config.
      $form['atom' . $atom_index]['scald_actions']['#access'] = false;

      // Set metadata
      $entity = $form['atom' . $atom_index]['#entity'];
      $language = $entity->language;
      #dpm ($entity, 'entity');
      #dpm ($language, 'language');

      if (!isset($entity->created)) {

        // Set scald title according to filename
        $file = file_load($entity->base_id);
        $filename = $file->filename;
        $form['atom' . $atom_index]['title']['#default_value'] = $file->filename;

        // For images, pre-populate the metadata from exif data (
        if ($entity->type == 'image') {

          // exif field => scald field
          $field_assocs = array(
            'field_media_description' => 'field_scald_description',
            //        'field_aperturevalue' => '',
            'field_iptc_headline' => 'field_scald_headline',
            'field_iptc_copyright' => 'field_licence_std_cc',
            'field_xmp_rights' => 'field_rights',
            'field_iptc_sublocation' => 'field_scald_location',
            'field_xmp_creator' => 'field_scald_creator',
            'field_iptc_keywords' => 'field_scald_keywords',
            //'field_exif_datetime' => 'field_scald_created',
            //'field_gps_latitude' => '',
            //'field_gps_longitude' => '',
          );

          foreach ($field_assocs as $exif_field => $scald_field) {
            if (isset($file->{$exif_field}[$language][0]['value']) && $form['atom' . $atom_index][$scald_field][$language][0]['value']['#default_value'] == NULL) {
              $form['atom' . $atom_index][$scald_field][$language][0]['value']['#default_value'] = $file->{$exif_field}[$language][0]['value'];
            }
          }

          if (isset($file->field_exif_datetime[$language][0]['value'])) {
            $form['atom' . $atom_index]['field_scald_created'][$language][0]['#default_value']['value'] = $file->field_exif_datetime[$language][0]['value'];
            $form['atom' . $atom_index]['field_scald_created'][$language][0]['#default_value']['value2'] = $file->field_exif_datetime[$language][0]['value'];
          }

          // do geolocation fields
          if (isset($file->field_gps_latitude[$language][0]['value']) && $form['atom' . $atom_index]['field_scald_geo_location'][$language][0]['geom']['#default_value']['lat'] == '') {
            $form['atom' . $atom_index]['field_scald_geo_location'][$language][0]['geom']['#default_value']['lat'] = $file->field_gps_latitude[$language][0]['value'];
          }
          if (isset($file->field_gps_longitude[$language][0]['value']) && $form['atom' . $atom_index]['field_scald_geo_location'][$language][0]['geom']['#default_value']['lon'] == '') {
            $form['atom' . $atom_index]['field_scald_geo_location'][$language][0]['geom']['#default_value']['lon'] = $file->field_gps_longitude[$language][0]['value'];
          }

          if ($form['atom' . $atom_index]['field_scald_identifier'][$language][0]['value']['#default_value'] == NULL) {
            $form['atom' . $atom_index]['field_scald_identifier'][$language][0]['value']['#default_value'] = $filename;
          }

          // If we have metadata to put into that atom title, do it, otherwise it is already populated with the atom filename
          if (isset($file->field_media_title[$language][0]['value'])) {
            $form['atom' . $atom_index]['title']['#default_value'] = $file->field_media_title[$language][0]['value'];
          }

          if (isset($file->field_iptc_keywords[$language][0]['value'])) {
            $keywords = $file->field_iptc_keywords[$language][0]['value'];
            if (sizeof($keywords)) {
              $form['atom' . $atom_index]['scald_tags'][$language]['#default_value'] = $keywords;
            }
          }
        }
      }
      $atom_index++;
    }
  }

}
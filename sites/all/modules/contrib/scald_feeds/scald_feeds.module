<?php
/**
 * @file
 * Feeds mapper for Atoms.
 */

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * @see FeedsNodeProcessor::getMappingTargets()
 */
function scald_feeds_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);

    if (in_array($info['type'], array('atom_reference'))) {
      $targets[$name] = array(
        'name' => check_plain($instance['label']),
        'callback' => 'scald_feeds_set_target',
        'description' => t('The @label field of the node.', array('@label' => $instance['label'])),
      );
    }
  }
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * When the callback is invoked, $target contains the name of the field the
 * user has decided to map to and $value contains the value of the feed item
 * element the user has picked as a source.
 */
function scald_feeds_set_target($source, $entity, $target, $value) {

  if (empty($value)) {
    return;
  }

  // Make sure $value is an array of objects of type FeedsEnclosure.
  if (!is_array($value)) {
    $value = array($value);
  }
  foreach ($value as $k => $v) {
    if (!($v instanceof FeedsEnclosure)) {
      if (is_string($v)) {
        $value[$k] = new FeedsEnclosure($v, file_get_mimetype($v));
      }
      else {
        unset($value[$k]);
      }
    }
  }
  if (empty($value)) {
    return;
  }

  $entity_type = $source->importer->processor->entityType();

  // Determine file destination.
  // @todo This needs review and debugging.
  $instance_info = field_info_instance($entity_type, $target, $source->importer->processor->bundle());
  $info = field_info_field($target);
  $data = array();
  if (!empty($entity->uid)) {
    $data[$entity_type] = $entity;
  }

  // Populate entity.
  $i = isset($entity->{$target}[LANGUAGE_NONE])?count($entity->{$target}[LANGUAGE_NONE]):0;
  $field = isset($entity->$target) ? $entity->$target : array();

  foreach ($value as $v) {
    // Check if using a GUID for an existing scald atom previously imported by feeds
    $existing_sid = scald_feeds_lookup_atom_by_guid($v->getValue());

    if($existing_sid == FALSE) {
      $type = _scald_feeds_get_provider_by_mime_type($v->getMimeType());
    
      // Search for a previously imported matching scald atom and use that if found.
      $existing_sid = scald_feeds_fetch_matching_atom($v->getValue(), $type);
    }

    if($existing_sid) {
      $field[LANGUAGE_NONE][$i] = array(
        'sid' => $existing_sid,
      );
      if ($info['cardinality'] == 1) {
        break;
      }
      $i++;
    }
    else {
      $destination = ScaldAtomController::getThumbnailPath($type);
      if($destination === '') {
	$destination = 'public://';
      }

      try {
	$file = file_copy(file_uri_to_object($v->getValue()), $destination, FILE_EXISTS_RENAME);
      }
      catch (Exception $e) {
        watchdog_exception('Feeds', $e, nl2br(check_plain($e)));
      }
      if ($file) {
        $file = (array) $file;
        $sid = _scald_feeds_save_atom($file, $type, basename($v->getValue()));

        $field[LANGUAGE_NONE][$i] = array(
          'sid' => $sid,
        );
        if ($info['cardinality'] == 1) {
          break;
        }
        $i++;
      }
    }
  }  

  $entity->{$target} = $field;
}

/**
 * The following _scald_feeds_save_[type]_atom functions borrow heavily from the type providers 
 * specific hook_scald_add_form_fill() functions.
 */
function _scald_feeds_save_audio_atom($file, &$atom) {
  $dir_audio_thumb = ScaldAtomController::getThumbnailPath('audio');
  $atom->base_id = $file['fid'];
  $atom->file_source = $file['uri'];
  $atom->data['audio_file'] = $file['uri'];
  $atom->data['audio_id'] = $file['fid'];
  
  if (module_exists('waudio_getid3') && $getid3 = _waudio_getid3_load()) {
    $filepath = drupal_realpath($file['uri']);
    // get all id3 infos
    $ret = waudio_getid3_ret_infos($filepath, $getid3);
  }
  elseif (module_exists('getid3') && ($id3 = getid3_instance())) {
    $filepath = drupal_realpath($file['uri']);
    $ret = array();
    // get all id3 infos
    $info = $id3->analyze($filepath);
    foreach($info['tags']['id3v2'] as $key => $value) {
      $ret['tags'][$key] = $value[0];
    }
    if (!empty($info['comments']['picture'][0]['data']) && !empty($info['comments']['picture'][0]['image_mime'])) {
      $ret['images'][0]['data'] = $info['comments']['picture'][0]['data'];
      $ret['images'][0]['image_mime'] = $info['comments']['picture'][0]['image_mime'];
    }
    elseif (!empty($info['id3v2']['APIC'][0]['data']) && !empty($info['id3v2']['APIC'][0]['image_mime'])) {
      $ret['images'][0]['data'] = $info['id3v2']['APIC'][0]['data'];
      $ret['images'][0]['image_mime'] = $info['id3v2']['APIC'][0]['image_mime'];
    }
  }
  if (!empty($ret)) {
    $atom->title = !empty($ret['tags']['title']) ? $ret['tags']['title'] : $file['filename'];

    // Prefill the author
    $langcode = field_language('scald_atom', $atom, 'scald_authors');
    $atom->scald_authors[$langcode][0] = array(
					       'tid' => 0,
					       'taxonomy_term' => (object)(array('name' => isset($ret['tags']['artist'])?$ret['tags']['artist']:t('Unknown')))
					       );

    // Prefill tags
    $langcode = field_language('scald_atom', $atom, 'scald_tags');
    $atom->scald_tags[$langcode][0] = array(
					    'tid' => 0,  // Beware, this is not a real tid, it's just an index
					    'taxonomy_term' => (object)(array('name' => isset($ret['tags']['genre'])?$ret['tags']['genre']:t('Unknown')))
					    );

    $atom->data['artist'] = isset($ret['tags']['artist'])?$ret['tags']['artist']:'';
    $atom->data['title'] = isset($ret['tags']['title'])?$ret['tags']['title']:'';
    $atom->data['album'] = isset($ret['tags']['album'])?$ret['tags']['album']:'';
    $atom->data['track'] = isset($ret['tags']['track'])?$ret['tags']['track']:isset($ret['tags']['track_number'])?$ret['tags']['track_number']:'';
    $atom->data['year'] = isset($ret['tags']['year'])?$ret['tags']['year']:'';
    $atom->data['genre'] = isset($ret['tags']['genre'])?$ret['tags']['genre']:'';

    // If the MP3 includes a cover art, use it as the default thumbnail.
    if (isset($ret['images'][0]['data']) && $ret['images'][0]['data'] != '') {
      $extension = '.jpg';
      if ($ret['images'][0]['image_mime'] == 'image/png') {
	$extension = '.png';
      }
      elseif ($ret['images'][0]['image_mime'] == 'image/gif') {
	$extension = '.gif';
      }
      $dest = $dir_audio_thumb . '/' . $file['filename'] . $extension;
      $file = file_save_data($ret['images'][0]['data'], $dest);

      if ($file) {
	// Set the file status to temporary (image thumb)
	db_update('file_managed')
	  ->condition('fid', $file->fid)
	  ->fields(array('status' => 0))
	  ->execute();
	$langcode = field_language('scald_atom', $atom, 'scald_thumbnail');
	$atom->scald_thumbnail[$langcode][0] = (array) $file;
      }
    }
  }
  
  return scald_atom_save($atom);
}

function _scald_feeds_save_video_atom($file, &$atom) {
  $atom->base_id = $file['fid'];
  $atom->file_source = $file['uri'];
  $atom->data['video_file'] = $file['uri'];
  $atom->data['video_id'] = $file['fid'];

  return scald_atom_save($atom);
}

function _scald_feeds_save_image_atom($file, &$atom) {
  $langcode = field_language('scald_atom', $atom, 'scald_thumbnail');

  $atom->base_id = $file['fid'];

  // Load any exif metadata
  $atom_wrapper = entity_metadata_wrapper('scald_atom', $atom);

  $field_assocs = array(
			'field_media_description' => 'field_scald_description',
			'field_iptc_headline' => 'field_scald_headline',
			'field_iptc_copyright' => 'field_licence_std_cc',
			'field_xmp_rights' => 'field_rights',
			'field_iptc_sublocation' => 'field_scald_location',
			'field_xmp_creator' => 'field_scald_creator'
			);

  foreach($field_assocs as $exif_field => $scald_field) {
    $atom_wrapper->{$scald_field} = $file[$exif_field][$langcode][0]['value'];
  }

  foreach($file['field_iptc_keywords'][$langcode] as $index => $tag) {
    $scald_tags = taxonomy_get_term_by_name($tag['value'], 'scald_tags');

    if(empty($scald_tags)) {
      $scald_tag_vocab = taxonomy_vocabulary_machine_name_load('scald_tags');

      if($scald_tag_vocab != FALSE) {
	$new_scald_tag = new stdClass();
	$new_scald_tag->name = $tag['value'];
	$new_scald_tag->vid = $scald_tag_vocab->vid;
	taxonomy_term_save($new_scald_tag);
	$atom_wrapper->scald_tags[] = entity_metadata_wrapper('taxonomy_term', $new_scald_tag->tid);
      }
    } else {
      $atom_wrapper->scald_tags[] = entity_metadata_wrapper('taxonomy_term', $scald_tags[key($scald_tags)]->tid);
    }
  }

  if (isset($file['field_exif_datetime'][$langcode][0]['value'])) {	
    $exif_date = date_create($file['field_exif_datetime'][$langcode][0]['value']);
    $atom_wrapper->field_scald_created->set(date_timestamp_get($exif_date));
  }
	
  if (isset($file['field_gps_latitude'][$langcode][0]['value']) && isset($file['field_gps_longitude'][$langcode][0]['value'])) {
    $atom_wrapper->field_scald_geo_location = array('lat' => $file['field_gps_latitude'][$langcode][0]['value'], 'lon' => $file['field_gps_longitude'][$langcode][0]['value']);
  }
  
  $atom->scald_thumbnail[$langcode][0] = (array) $file;

  return scald_atom_save($atom);
}

function _scald_feeds_save_file_atom($file, &$atom) {
  $file['display'] = TRUE;
  $atom->base_id = $file['fid'];
  $atom->scald_file[LANGUAGE_NONE][0] = (array) $file;

  return scald_atom_save($atom);
}


/**
 * Saves a Scald Atom programmatically from a file.
 */
function _scald_feeds_save_atom($file, $type, $title = NULL) {
  if (is_numeric($file)) {
    $file = (array) file_load($file);
  }
  elseif (!is_object($file) && !is_array($file)) {
    return FALSE;
  }

  $file_array = (array) $file;
  if (!isset($file_array['filename'])) {
    $file = file_load($file_array['fid']);
    $file_array = (array) $file;
  }

  $atom = new ScaldAtom($type, 'scald_' . $type);
  // Skip atom type the user isn't allowed to create.
  if (!scald_action_permitted($atom, 'create')) {
    return FALSE;
  }

  $atom_wrapper = entity_metadata_wrapper('scald_atom', $atom);

  $language = entity_language('scald_atom', $atom_wrapper);
  if(is_null($language)) {
    $language = LANGUAGE_NONE;
  }

  $atom->title = !empty($title) ? $title : $file_array['filename'];
  $atom->language = $language;

  switch ($type) {
    case 'file':
      return _scald_feeds_save_file_atom($file, $atom);
    case 'image':
      return _scald_feeds_save_image_atom($file, $atom);
    case 'audio':
      return _scald_feeds_save_audio_atom($file, $atom);
    case 'video':
      return _scald_feeds_save_video_atom($file, $atom);
  }
}


/**
 * Suggests a Scald provider for the given file.
 *
 * Chooses from file, audio, image and video.
 */
function _scald_feeds_get_provider_by_mime_type($mime_type) {
  $type = 'file';

  if (strpos($mime_type, 'audio/') === 0) {
    $type = 'audio';
  }
  if (strpos($mime_type, 'image/') === 0) {
    $type = 'image';
  }
  elseif (strpos($mime_type, 'video/') === 0) {
    $type = 'video';
  }

  return $type;
}

/**
 * Looks up an atom by GUID, assumes SQL storage backend.
 *
 * @param string $guid
 *   The Feeds GUID to compare against.
 *
 * @return int|FALSE
 *   The atom id, or FALSE if one was not found.
 */
function scald_feeds_lookup_atom_by_guid($guid) {
  return db_select('feeds_item')
    ->fields('feeds_item', array('entity_id'))
    ->condition('entity_type', 'scald_atom')
    ->condition('guid', $guid)
    ->execute()
    ->fetchField();
}


/**
 * Looks for an existing imported atom that is equivalent to a newly created atom using the new file.
 * This is to avoid creating duplicate atoms on repeated feed imports.
 *
 * @param string $filename
 *   The full path & filename of the file to compare
 *
 * @return int|FALSE
 *   The atom id, or FALSE if one was not found.
 */
function scald_feeds_fetch_matching_atom($filename, $type) {
  global $user;

  $scald_query = array( 'title' => basename($filename),
			'type' => $type,
			'publisher' => $user->uid);
  $sids = scald_search($scald_query, FALSE);
      
  if(!$sids) {
    return FALSE;
  }

  foreach ($sids as $sid) {
    $atom = scald_atom_load($sid);

    switch ($type) {
    case 'file':
      scald_file_scald_fetch($atom, 'atom');
      break;
    case 'image':
      scald_image_scald_fetch($atom, 'atom');
      break;
    case 'audio':
      scald_audio_scald_fetch($atom, 'atom');
      break;
    case 'video':
      scald_video_scald_fetch($atom, 'atom');
      break;
    }

    if (filesize($atom->file_source) == filesize($filename) && 
	md5_file($atom->file_source) == md5_file($filename) && 
	$atom->changed == $atom->created) {
      return $sid;
    }
  }

  return FALSE;
}